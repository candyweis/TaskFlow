class TimeTrackingModal {
    constructor() {
        this.currentTaskId = null;
        this.targetStatus = null;
        this.init();
    }

    init() {
        this.createModal();
        this.bindEvents();
    }

    createModal() {
        const modalHtml = `
            <div id="timeTrackingModal" class="modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>üìä –£—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã</h3>
                        <p id="timeTaskTitle" class="modal-subtitle"></p>
                        <button class="close" data-modal="timeTrackingModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="time-tracking-form">
                            <div class="form-group">
                                <label>‚è±Ô∏è –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å–æ–≤)</label>
                                <input type="number" id="hoursSpent" min="0.1" max="100" step="0.1" 
                                       placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2.5">
                                <small class="form-hint">–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5 = 1 —á–∞—Å 30 –º–∏–Ω—É—Ç)</small>
                            </div>
                            
                            <div class="form-group">
                                <label>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ</label>
                                <textarea id="timeComment" rows="4" 
                                          placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)..."></textarea>
                            </div>
                            
                            <div class="time-info">
                                <div class="info-card">
                                    <h4>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ</h4>
                                    <div id="taskComplexityInfo"></div>
                                    <div id="taskPriorityInfo"></div>
                                    <div id="taskAssigneesInfo"></div>
                                    <div id="taskStatusChange"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" onclick="timeTracking.closeModal()">
                            ‚ùå –û—Ç–º–µ–Ω–∞
                        </button>
                        <button type="button" id="moveWithoutTimeBtn" class="btn btn-warning">
                            üöÄ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                        </button>
                        <button type="button" id="saveTimeBtn" class="btn btn-success">
                            ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', modalHtml);
    }

    bindEvents() {
        document.getElementById('saveTimeBtn').addEventListener('click', () => this.saveTime());
        document.getElementById('moveWithoutTimeBtn').addEventListener('click', () => this.moveWithoutTime());
        
        // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏
        document.addEventListener('DOMContentLoaded', () => {
            const modal = document.getElementById('timeTrackingModal');
            if (modal) {
                modal.addEventListener('show', () => {
                    setTimeout(() => {
                        document.getElementById('hoursSpent').focus();
                    }, 100);
                });
            }
        });
    }

    show(taskId, taskData, targetStatus = 'done') {
        this.currentTaskId = taskId;
        this.targetStatus = targetStatus;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        document.getElementById('timeTaskTitle').textContent = taskData.title;
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        const complexityTexts = {
            easy: 'üü¢ –õ–µ–≥–∫–∞—è',
            medium: 'üü° –°—Ä–µ–¥–Ω—è—è', 
            hard: 'üü† –°–ª–æ–∂–Ω–∞—è',
            expert: 'üî¥ –¢–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤'
        };
        
        if (taskData.complexity) {
            document.getElementById('taskComplexityInfo').innerHTML = 
                `<strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> ${complexityTexts[taskData.complexity] || taskData.complexity}`;
        } else {
            document.getElementById('taskComplexityInfo').innerHTML = 
                `<strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> ${complexityTexts['medium']}`;
        }
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ  
        const priorityTexts = {
            low: 'üü¶ –ù–∏–∑–∫–∏–π',
            medium: 'üü® –°—Ä–µ–¥–Ω–∏–π',
            high: 'üü• –í—ã—Å–æ–∫–∏–π'
        };
        document.getElementById('taskPriorityInfo').innerHTML = 
            `<strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> ${priorityTexts[taskData.priority] || taskData.priority}`;
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
        const assigneesCount = taskData.assignees ? taskData.assignees.length : 0;
        document.getElementById('taskAssigneesInfo').innerHTML = 
            `<strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:</strong> ${assigneesCount}`;

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
        const statusTexts = {
            unassigned: '–ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ',
            in_progress: '–í —Ä–∞–±–æ—Ç–µ',
            developed: '–¢–µ—Ö–∞—Ä—å',
            review: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
            deploy: '–ó–∞–≥—Ä—É–∂–∞—Ç—å',
            done: '–ì–æ—Ç–æ–≤–æ'
        };
        
        const currentStatusText = statusTexts[taskData.status] || taskData.status;
        const targetStatusText = statusTexts[this.targetStatus] || this.targetStatus;
        
        document.getElementById('taskStatusChange').innerHTML = 
            `<strong>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:</strong> ${currentStatusText} ‚Üí ${targetStatusText}`;

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('hoursSpent').value = '';
        document.getElementById('timeComment').value = '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        app.showModal('timeTrackingModal');
    }

    async moveWithoutTime() {
        const moveBtn = document.getElementById('moveWithoutTimeBtn');
        const originalText = moveBtn.innerHTML;
        moveBtn.disabled = true;
        moveBtn.innerHTML = '‚è≥ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ...';

        try {
            // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
            const statusResponse = await app.apiCall(`/api/tasks/${this.currentTaskId}/status`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: this.targetStatus })
            });

            if (!statusResponse.ok) {
                const error = await statusResponse.json();
                throw new Error(error.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
            }

            const statusTexts = {
                unassigned: '–ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ',
                in_progress: '–í —Ä–∞–±–æ—Ç–µ',
                developed: '–¢–µ—Ö–∞—Ä—å',
                review: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
                deploy: '–ó–∞–≥—Ä—É–∂–∞—Ç—å',
                done: '–ì–æ—Ç–æ–≤–æ'
            };

            app.showNotification(`‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ "${statusTexts[this.targetStatus]}"`, 'success');
            this.closeModal();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É –∑–∞–¥–∞—á
            if (app.renderBoard) {
                app.renderBoard();
            }

        } catch (error) {
            console.error('Error moving task:', error);
            app.showNotification(error.message || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
        } finally {
            moveBtn.disabled = false;
            moveBtn.innerHTML = originalText;
        }
    }

    async saveTime() {
        const hoursSpent = parseFloat(document.getElementById('hoursSpent').value);
        const comment = document.getElementById('timeComment').value.trim();

        if (!hoursSpent || hoursSpent <= 0) {
            app.showNotification('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤', 'error');
            return;
        }

        if (hoursSpent > 100) {
            app.showNotification('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤. –ú–∞–∫—Å–∏–º—É–º 100 —á–∞—Å–æ–≤.', 'error');
            return;
        }

        const saveBtn = document.getElementById('saveTimeBtn');
        const originalText = saveBtn.innerHTML;
        saveBtn.disabled = true;
        saveBtn.innerHTML = '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';

        try {
            // –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            const timeResponse = await app.apiCall('/api/tasks/time-logs', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    task_id: this.currentTaskId,
                    hours_spent: hoursSpent,
                    comment: comment
                })
            });

            if (!timeResponse.ok) {
                const error = await timeResponse.json();
                throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏');
            }

            // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å
            const statusResponse = await app.apiCall(`/api/tasks/${this.currentTaskId}/status`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: this.targetStatus })
            });

            if (!statusResponse.ok) {
                const error = await statusResponse.json();
                throw new Error(error.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
            }

            const statusTexts = {
                unassigned: '–ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ',
                in_progress: '–í —Ä–∞–±–æ—Ç–µ',
                developed: '–¢–µ—Ö–∞—Ä—å',
                review: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
                deploy: '–ó–∞–≥—Ä—É–∂–∞—Ç—å',
                done: '–ì–æ—Ç–æ–≤–æ'
            };

            app.showNotification(`‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ "${statusTexts[this.targetStatus]}"! –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ ${hoursSpent} —á.`, 'success');
            this.closeModal();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É –∑–∞–¥–∞—á
            if (app.renderBoard) {
                app.renderBoard();
            }

        } catch (error) {
            console.error('Error saving time:', error);
            app.showNotification(error.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏', 'error');
        } finally {
            saveBtn.disabled = false;
            saveBtn.innerHTML = originalText;
        }
    }

    closeModal() {
        app.closeModal('timeTrackingModal');
        this.currentTaskId = null;
        this.targetStatus = null;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
window.timeTracking = new TimeTrackingModal();
