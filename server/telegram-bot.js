const TelegramBot = require('node-telegram-bot-api');
const User = require('./models/User');
const Task = require('./models/Task');
const Project = require('./models/Project');

class TaskFlowTelegramBot {
    constructor() {
        // –¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        this.token = process.env.TELEGRAM_BOT_TOKEN || '7640810451:AAH1YtcL98ALY1OXZiMEpLOiKUlzXl5HAIc';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if (!this.token || this.token === 'YOUR_BOT_TOKEN_HERE') {
            throw new Error('Telegram bot token not configured');
        }
        
        this.bot = null;
        this.isRunning = false;
        this.initBot();
    }

    async initBot() {
        try {
            console.log('ü§ñ Initializing Telegram bot...');
            
            // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ polling
            this.bot = new TelegramBot(this.token, { polling: false });
            
            // –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            await this.bot.deleteWebHook();
            console.log('‚úÖ Webhook deleted');
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await this.bot.startPolling({
                restart: true,
                polling: {
                    interval: 300,
                    autoStart: true,
                    params: {
                        timeout: 10
                    }
                }
            });
            
            this.isRunning = true;
            console.log('‚úÖ Telegram bot polling started');
            
            this.setupCommands();
            this.setupErrorHandling();
            
        } catch (error) {
            console.error('‚ùå Failed to initialize Telegram bot:', error);
            throw error;
        }
    }

    setupErrorHandling() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
        this.bot.on('polling_error', (error) => {
            console.error('Telegram polling error:', error.message);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
            if (error.code === 'ETELEGRAM' && error.message.includes('409')) {
                console.log('üîÑ Attempting to restart bot due to conflict...');
                this.restart();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—à–∏–±–æ–∫
        this.bot.on('webhook_error', (error) => {
            console.error('Telegram webhook error:', error);
        });

        // Graceful shutdown
        process.on('SIGINT', () => {
            console.log('üìõ Received SIGINT. Shutting down Telegram bot gracefully...');
            this.stop();
            process.exit(0);
        });

        process.on('SIGTERM', () => {
            console.log('üìõ Received SIGTERM. Shutting down Telegram bot gracefully...');
            this.stop();
            process.exit(0);
        });
    }

    async restart() {
        try {
            console.log('üîÑ Restarting Telegram bot...');
            await this.stop();
            await new Promise(resolve => setTimeout(resolve, 2000));
            await this.initBot();
        } catch (error) {
            console.error('‚ùå Failed to restart bot:', error);
        }
    }

    async stop() {
        if (this.bot && this.isRunning) {
            try {
                console.log('‚èπÔ∏è Stopping Telegram bot...');
                await this.bot.stopPolling();
                this.isRunning = false;
                console.log('‚úÖ Telegram bot stopped');
            } catch (error) {
                console.error('Error stopping bot:', error);
            }
        }
    }

    setupCommands() {
        if (!this.bot) return;

        // –ö–æ–º–∞–Ω–¥–∞ /start
        this.bot.onText(/\/start/, async (msg) => {
            const chatId = msg.chat.id;
            const welcomeMessage = `
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskFlow Bot!*

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/link <username> - –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç TaskFlow —Å Telegram
/unlink - –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ü—Ä–∏–º–µ—Ä:*
\`/link admin\` - —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç admin —Å —ç—Ç–∏–º Telegram

–ü–æ—Å–ª–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –≤–∞—à–∏–º –∑–∞–¥–∞—á–∞–º
            `;
            
            try {
                await this.bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error('Error sending start message:', error);
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /link
        this.bot.onText(/\/link (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            const username = match[1].trim();

            try {
                const user = await User.findByUsername(username);
                if (!user) {
                    await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è username.');
                    return;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await User.updateTelegramChatId(user.id, chatId);
                
                await this.bot.sendMessage(chatId, `‚úÖ –ê–∫–∫–∞—É–Ω—Ç *${username}* —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö.`, { parse_mode: 'Markdown' });
                
                console.log(`User ${username} linked Telegram chat ID: ${chatId}`);
            } catch (error) {
                console.error('Error linking user:', error);
                await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /unlink
        this.bot.onText(/\/unlink/, async (msg) => {
            const chatId = msg.chat.id;

            try {
                const user = await User.findByTelegramChatId(chatId);
                if (!user) {
                    await this.bot.sendMessage(chatId, '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                    return;
                }

                await User.updateTelegramChatId(user.id, null);
                await this.bot.sendMessage(chatId, '‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç Telegram.');
                
                console.log(`User ${user.username} unlinked from Telegram`);
            } catch (error) {
                console.error('Error unlinking user:', error);
                await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /status
        this.bot.onText(/\/status/, async (msg) => {
            const chatId = msg.chat.id;

            try {
                const user = await User.findByTelegramChatId(chatId);
                if (!user) {
                    await this.bot.sendMessage(chatId, '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ TaskFlow.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link <username> –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.');
                    return;
                }

                const statusMessage = `
‚úÖ *–°—Ç–∞—Ç—É—Å —Å–≤—è–∑—ã–≤–∞–Ω–∏—è*

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *${user.username}*
üè∑Ô∏è –†–æ–ª—å: *${this.getRoleText(user.role)}*
üì± Chat ID: \`${chatId}\`
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date(user.created_at).toLocaleDateString('ru-RU')}

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: *–í–∫–ª—é—á–µ–Ω—ã* ‚úÖ
                `;

                await this.bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error('Error checking status:', error);
                await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /help
        this.bot.onText(/\/help/, async (msg) => {
            const chatId = msg.chat.id;
            const helpMessage = `
üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/link <username> - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç TaskFlow
/unlink - –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*
üìã –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞—á—É
üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
üí¨ –ù–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚è∞ –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã
            `;
            
            try {
                await this.bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error('Error sending help message:', error);
            }
        });

        console.log('ü§ñ Telegram bot commands setup completed');
    }

    getRoleText(role) {
        const roles = {
            admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            manager: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            worker: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
        };
        return roles[role] || role;
    }

    getStatusEmoji(status) {
        const statusEmojis = {
            unassigned: 'üì•',
            in_progress: 'üîÑ',
            developed: 'üíª',
            review: 'üëÄ',
            deploy: 'üöÄ',
            done: '‚úÖ',
            archived: 'üì¶'
        };
        return statusEmojis[status] || 'üìã';
    }

    getStatusText(status) {
        const statusTexts = {
            unassigned: '–ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ',
            in_progress: '–í —Ä–∞–±–æ—Ç–µ',
            developed: '–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ',
            review: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
            deploy: '–ù–∞ –∑–∞–ª–∏–≤–µ',
            done: '–ì–æ—Ç–æ–≤–æ',
            archived: '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'
        };
        return statusTexts[status] || status;
    }

    getPriorityEmoji(priority) {
        const priorityEmojis = {
            low: 'üü¢',
            medium: 'üü°',
            high: 'üî¥'
        };
        return priorityEmojis[priority] || '‚ö™';
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    async safeSendMessage(chatId, message, options = {}) {
        if (!this.bot || !this.isRunning) {
            console.warn('Bot is not running, skipping message');
            return false;
        }

        try {
            await this.bot.sendMessage(chatId, message, options);
            return true;
        } catch (error) {
            console.error(`Error sending message to ${chatId}:`, error.message);
            return false;
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞–¥–∞—á—É
    async notifyTaskAssignment(taskId, assigneeIds, assignedBy) {
        if (!this.isRunning) return;

        try {
            const task = await Task.findById(taskId);
            if (!task) return;

            const project = await Project.findById(task.project_id);
            const assigner = await User.findById(assignedBy);

            for (const assigneeId of assigneeIds) {
                const user = await User.findById(assigneeId);
                if (!user || !user.telegram_chat_id) continue;

                const message = `
üìã *–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –Ω–∞ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!*

*–ó–∞–¥–∞—á–∞:* ${task.title}
${task.goal ? `*–¶–µ–ª—å:* ${task.goal}` : ''}
*–ü—Ä–æ–µ–∫—Ç:* ${project ? project.name : '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'}
*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${this.getPriorityEmoji(task.priority)} ${task.priority}
*–î–µ–¥–ª–∞–π–Ω:* ${new Date(task.deadline).toLocaleDateString('ru-RU')}
*–ù–∞–∑–Ω–∞—á–∏–ª:* ${assigner ? assigner.username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

*–û–ø–∏—Å–∞–Ω–∏–µ:*
${task.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ TaskFlow](${process.env.APP_URL || 'http://localhost:3000'})
                `;

                const sent = await this.safeSendMessage(user.telegram_chat_id, message, { parse_mode: 'Markdown' });
                if (sent) {
                    console.log(`Sent assignment notification to ${user.username}`);
                }
            }
        } catch (error) {
            console.error('Error sending assignment notification:', error);
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    async notifyTaskStatusChange(taskId, oldStatus, newStatus, changedBy) {
        if (!this.isRunning) return;

        try {
            const task = await Task.findById(taskId);
            if (!task) return;

            const project = await Project.findById(task.project_id);
            const changer = await User.findById(changedBy);
            const creator = await User.findById(task.created_by);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
            if (creator && creator.telegram_chat_id && creator.id !== changedBy) {
                const message = `
üîÑ *–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏*

*–ó–∞–¥–∞—á–∞:* ${task.title}
*–ü—Ä–æ–µ–∫—Ç:* ${project ? project.name : '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'}

*–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:*
${this.getStatusEmoji(oldStatus)} ${this.getStatusText(oldStatus)} ‚Üí ${this.getStatusEmoji(newStatus)} ${this.getStatusText(newStatus)}

*–ò–∑–º–µ–Ω–∏–ª:* ${changer ? changer.username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
*–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}

üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ TaskFlow](${process.env.APP_URL || 'http://localhost:3000'})
                `;

                const sent = await this.safeSendMessage(creator.telegram_chat_id, message, { parse_mode: 'Markdown' });
                if (sent) {
                    console.log(`Sent status change notification to creator ${creator.username}`);
                }
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ —Ç–æ–≥–æ, –∫—Ç–æ –∏–∑–º–µ–Ω–∏–ª)
            if (task.assignees && task.assignees.length > 0) {
                for (const assigneeId of task.assignees) {
                    if (assigneeId === changedBy) continue; // –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–≥–æ, –∫—Ç–æ –∏–∑–º–µ–Ω–∏–ª

                    const user = await User.findById(assigneeId);
                    if (!user || !user.telegram_chat_id) continue;

                    const message = `
üîÑ *–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω*

*–ó–∞–¥–∞—á–∞:* ${task.title}
*–ü—Ä–æ–µ–∫—Ç:* ${project ? project.name : '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'}

*–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:* ${this.getStatusEmoji(newStatus)} ${this.getStatusText(newStatus)}
*–ò–∑–º–µ–Ω–∏–ª:* ${changer ? changer.username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ TaskFlow](${process.env.APP_URL || 'http://localhost:3000'})
                    `;

                    const sent = await this.safeSendMessage(user.telegram_chat_id, message, { parse_mode: 'Markdown' });
                    if (sent) {
                        console.log(`Sent status change notification to assignee ${user.username}`);
                    }
                }
            }
        } catch (error) {
            console.error('Error sending status change notification:', error);
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    async notifyNewComment(taskId, commentText, commentBy) {
        if (!this.isRunning) return;

        try {
            const task = await Task.findById(taskId);
            if (!task) return;

            const project = await Project.findById(task.project_id);
            const commenter = await User.findById(commentBy);

            const usersToNotify = new Set();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
            if (task.created_by && task.created_by !== commentBy) {
                usersToNotify.add(task.created_by);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (task.assignees) {
                task.assignees.forEach(assigneeId => {
                    if (assigneeId !== commentBy) {
                        usersToNotify.add(assigneeId);
                    }
                });
            }

            for (const userId of usersToNotify) {
                const user = await User.findById(userId);
                if (!user || !user.telegram_chat_id) continue;

                const message = `
üí¨ *–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ*

*–ó–∞–¥–∞—á–∞:* ${task.title}
*–ü—Ä–æ–µ–∫—Ç:* ${project ? project.name : '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'}
*–ê–≤—Ç–æ—Ä:* ${commenter ? commenter.username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*
"${commentText}"

üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ TaskFlow](${process.env.APP_URL || 'http://localhost:3000'})
                `;

                const sent = await this.safeSendMessage(user.telegram_chat_id, message, { parse_mode: 'Markdown' });
                if (sent) {
                    console.log(`Sent comment notification to ${user.username}`);
                }
            }
        } catch (error) {
            console.error('Error sending comment notification:', error);
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –¥–µ–¥–ª–∞–π–Ω–µ
    async notifyUpcomingDeadline(taskId) {
        if (!this.isRunning) return;

        try {
            const task = await Task.findById(taskId);
            if (!task) return;

            const project = await Project.findById(task.project_id);
            const deadline = new Date(task.deadline);
            const now = new Date();
            const hoursLeft = Math.round((deadline - now) / (1000 * 60 * 60));

            const usersToNotify = new Set();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
            if (task.created_by) {
                usersToNotify.add(task.created_by);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (task.assignees) {
                task.assignees.forEach(assigneeId => {
                    usersToNotify.add(assigneeId);
                });
            }

            for (const userId of usersToNotify) {
                const user = await User.findById(userId);
                if (!user || !user.telegram_chat_id) continue;

                const message = `
‚è∞ *–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω!*

*–ó–∞–¥–∞—á–∞:* ${task.title}
*–ü—Ä–æ–µ–∫—Ç:* ${project ? project.name : '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'}
*–°—Ç–∞—Ç—É—Å:* ${this.getStatusEmoji(task.status)} ${this.getStatusText(task.status)}
*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${this.getPriorityEmoji(task.priority)} ${task.priority}

${hoursLeft > 0 ? `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${hoursLeft} —á.` : 'üö® –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω!'}
*–î–µ–¥–ª–∞–π–Ω:* ${deadline.toLocaleString('ru-RU')}

üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ TaskFlow](${process.env.APP_URL || 'http://localhost:3000'})
                `;

                const sent = await this.safeSendMessage(user.telegram_chat_id, message, { parse_mode: 'Markdown' });
                if (sent) {
                    console.log(`Sent deadline notification to ${user.username}`);
                }
            }
        } catch (error) {
            console.error('Error sending deadline notification:', error);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async sendCustomNotification(userId, message) {
        if (!this.isRunning) return false;

        try {
            const user = await User.findById(userId);
            if (!user || !user.telegram_chat_id) return false;

            const sent = await this.safeSendMessage(user.telegram_chat_id, message, { parse_mode: 'Markdown' });
            if (sent) {
                console.log(`Sent custom notification to ${user.username}`);
            }
            return sent;
        } catch (error) {
            console.error('Error sending custom notification:', error);
            return false;
        }
    }
}

module.exports = TaskFlowTelegramBot;
